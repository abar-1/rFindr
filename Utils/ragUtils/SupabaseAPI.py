import os
from supabase import create_client, Client
import EmbGenerator as embGenerator
import ScrapeProfs, DocumentChunker
from dotenv import load_dotenv
import os, json, requests

class SupabaseAPI:
    supabase: Client
    profNames: list[str]

    def __init__(self):
        self.__setup_Supabase()

    def __main__(self, case: int = 0):
        if case == 1:
            ud = SupabaseAPI()

            url = "https://www.cs.purdue.edu/people/faculty/aliaga.html"
            ud.upload_embedding(url)
        else:
            return "case = 0, set case = 1 to run example."
    
# ============ UPLOAD EMBEDDINGS TO DB ============= #
    def upload_embedding(self, url: str):
        self.__get_Prof_Names()
        if not url:
            raise ValueError("URL must be provided.")
        
        name, email, details = ScrapeProfs.get_professor_info(url)
        embedding = embGenerator.generate_Embedding(details)
        print(f"Generated embedding for professor {name}.")

        if name in self.profNames:
            print(f"Professor {name} already exists in the database. Skipping upload.")
            return
        prof_id = self.__upsert_professor(name=name, email=email, research_areas=details)
        self.__insert_professor_embedding(professor_id=prof_id, embedding=embedding, chunk=details)
        print(f"Successfully uploaded embeddings to VDB for prof: {name}.")

    
        
    def __setup_Supabase(self)-> None:
        load_dotenv()
        SUPABASE_URL = os.getenv("DATABASE_URL")
        SUPABASE_ANON_KEY = os.getenv("SUPABASE_PUBLIC")

        if not SUPABASE_URL or not SUPABASE_ANON_KEY:
            raise RuntimeError("Set SUPABASE_URL and SUPABASE_ANON_KEY in your environment.")
        
        self.supabase: Client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
        docChunker = DocumentChunker.DocumentChunker(chunk_token_size=500, overlap=100)


    def __upsert_professor(self, name: str, email: str, department: str | None = None, research_areas: str | None = None) -> int:
        payload = {"name": name, "email": email}
        if department is not None:
            payload["department"] = department
        if research_areas is not None:
            payload["research_areas"] = research_areas
        self.supabase.table("professors").upsert(payload, on_conflict="email").execute()
        resp = self.supabase.table("professors").select("id").eq("email", email).single().execute()
        return resp.data["id"]

    def __insert_professor_embedding(self, professor_id: int, embedding: list[float], chunk: str) -> None:
        self.supabase.table("professor_embeddings").insert({"professor_id": professor_id, "embedding": embedding, "chunk": chunk}).execute()

# ============ Get Data From DB ============= #
    def rag_Search (self, embedding: list[float], match_count: int = 30):
        print("Performing RAG search...")
        print("length of embedding:", len(embedding))
        rows = (
            self.supabase
                .rpc("match_professor_embeddings",
                    {"query_embedding": [float(x) for x in embedding],
                    "match_count": int(match_count)})
                .select("*")
                .execute()
        )
        print("TYPE of resp.data:", type(rows.data))
        print("RAW resp.data:", rows.data)
        return rows.data
    
    def rag_Search_raw(embedding, match_count=30):
        url = os.getenv("DATABASE_URL")  
        key = os.getenv("SUPABASE_PUBLIC")

        endpoint = f"{url}/rest/v1/rpc/match_professor_embeddings"
        headers = {
            "apikey": key,
            "Authorization": f"Bearer {key}",
            "Content-Type": "application/json",
            "Accept": "application/json",
        }
        params = {"select": "*"}  # force array response

        payload = {
            "query_embedding": [float(x) for x in embedding],
            "match_count": int(match_count),
        }

        r = requests.post(endpoint, headers=headers, params=params, data=json.dumps(payload))
        print("HTTP status:", r.status_code)
        print("Raw body:", r.text)

        data = r.json()
        print("Python sees:", type(data), "len =", (len(data) if isinstance(data, list) else "n/a"))
        return data
    
    def __get_Prof_Names(self) -> None:
        resp = self.supabase.table("professors").select("name").execute()
        self.profNames = [record["name"] for record in resp.data]



    
if __name__ == "__main__":
    embs = [0.015485135838389397, -0.04993753880262375, -0.024799328297376633, -0.013122261501848698, 0.03936173766851425, -0.02141404151916504, 0.011243033222854137, -0.0038042431697249413, -0.06075965240597725, -0.001386877498589456, -0.058860763907432556, 0.018062634393572807, 0.04736853390932083, 0.0368385948240757, -0.02936096489429474, 0.05264303460717201, -0.024389397352933884, 0.04629063606262207, -0.0511435940861702, -0.0600597970187664, -0.02417570725083351, 0.005602861288934946, 0.032212186604738235, -0.07634226977825165, -0.04620124399662018, -0.008932538330554962, 0.05511719360947609, -0.1180216521024704, 0.01652747578918934, -0.01391912717372179, -0.02568422071635723, 0.0035903286188840866, 0.016619909554719925, 0.02673541009426117, 0.03433160111308098, 0.060681313276290894, -0.00601835735142231, 0.09102807193994522, 0.008899320848286152, -0.0041153752245008945, -0.0675182044506073, 0.011877582408487797, 0.029222823679447174, -0.050393808633089066, 0.09393284469842911, -0.0280607920140028, -0.021008586511015892, -0.0456734262406826, 0.03283705934882164, 4.0419879951514304e-05, -0.14167596399784088, -0.08012587577104568, -0.03716224804520607, -0.03946169838309288, -0.09162766486406326, -0.012279254384338856, 0.03483284264802933, -0.007354905363172293, 0.0023763608187437057, -0.02256816439330578, 0.025532040745019913, -0.06454378366470337, -0.07544299215078354, 0.014485119841992855, -0.0018685859395191073, 0.057203199714422226, -0.032427381724119186, 0.03423650935292244, 0.030328504741191864, -0.06437723338603973, -0.047478411346673965, 0.08172516524791718, 0.006214861758053303, 0.02959783747792244, 0.042082782834768295, -0.018844833597540855, 0.043634820729494095, -0.028886932879686356, 0.06730550527572632, -0.08789950609207153, 0.04157334193587303, -0.07604110240936279, 0.013113374821841717, -0.0268796905875206, 0.05892757698893547, -0.03140547126531601, -0.08908524364233017, -0.009580369107425213, -0.025335486978292465, -0.03385445848107338, 0.016174690797924995, -0.028508145362138748, -0.03869583457708359, -0.02678123489022255, 0.03508578613400459, -0.007909202948212624, 0.048169009387493134, -0.09284735471010208, 0.03710128739476204, 0.040325846523046494, -0.08027012646198273, -0.007573214825242758, 0.042274635285139084, -0.03577641397714615, 0.02368033491075039, 0.09576211124658585, -0.050496622920036316, 0.031235696747899055, 0.06672155112028122, -0.005895578768104315, 0.06501457095146179, 0.05626733601093292, -0.1010826975107193, 0.01775042526423931, 0.03300166130065918, -0.04711730033159256, 0.05881228670477867, 0.008218131959438324, 0.032863371074199677, -0.03094174526631832, -0.12286919355392456, 0.027315516024827957, -0.04492984339594841, -0.10907130688428879, -0.0075638918206095695, -0.05776752531528473, -0.08237887173891068, 1.2528724603266146e-33, 0.007282163016498089, 0.039251405745744705, 0.03383740037679672, -0.007671748753637075, 0.02923274040222168, -0.03744761645793915, 0.001119882450439036, -0.009601146914064884, -0.029126156121492386, -0.0694861188530922, 0.015786174684762955, 0.07284586131572723, 0.009757550433278084, 0.11277975887060165, -0.00474189780652523, -0.0730869397521019, 0.05715589225292206, -0.058751121163368225, -0.03028040938079357, 0.02439231239259243, 0.018863746896386147, -0.011435582302510738, 0.009411903098225594, 0.06365491449832916, 0.0012428152840584517, 0.04152991622686386, 0.012608232907950878, -0.05819232389330864, 0.10575689375400543, 0.012835424393415451, 0.042310718446969986, 0.041635580360889435, -0.08943834900856018, -0.009591015987098217, 0.11626660078763962, 0.073699451982975, 0.019602667540311813, 0.02660844288766384, 0.05098046362400055, 0.02228093147277832, -0.011634870432317257, 0.04143828898668289, 0.06825660914182663, -0.05255429819226265, -0.05969268083572388, 0.00846268329769373, 0.08490036427974701, 0.021558575332164764, 0.07478953152894974, -0.026713727042078972, -0.054390743374824524, -0.04055815935134888, -0.07092857360839844, -0.04748211055994034, 0.03971770033240318, 0.026094313710927963, 0.019907459616661072, -0.014802567660808563, 0.05017098784446716, -0.05235058069229126, 0.030738674104213715, 0.012960211373865604, -0.036904413253068924, -0.011552671901881695, -0.025051716715097427, -0.07980262488126755, 0.021802080795168877, -0.03544115647673607, -0.00324737885966897, 0.014759247191250324, -0.006695505231618881, 0.016544198617339134, 0.008548467420041561, -0.06408676505088806, -0.017339792102575302, 0.06398142874240875, -0.05599658936262131, -0.047097571194171906, -0.025226883590221405, 0.054763294756412506, -0.07576321810483932, -0.002713445108383894, 0.0029706426430493593, -0.04268503561615944, -0.07572466135025024, 0.02284267544746399, 0.0203953068703413, 0.014615190215408802, 0.014492262154817581, -0.021471820771694183, 0.012154106050729752, 0.03442894667387009, 0.01095074787735939, 0.0642605647444725, -0.06524065136909485, -3.697721355312976e-33, -0.02002634108066559, 0.0002601342275738716, 0.04802572354674339, 0.08367495983839035, 0.07731858640909195, 0.014056156389415264, 0.0010958026396110654, 0.004766758065670729, 0.015535479411482811, -0.06116125360131264, 0.05301273614168167, 0.02523953467607498, -0.012828163802623749, 0.1048208624124527, -0.052923381328582764, -0.005232327152043581, -0.03757042810320854, 0.03642923757433891, -0.08404383063316345, -0.001948939636349678, -0.014711078256368637, 0.11183929443359375, -0.05115203186869621, -0.009499737992882729, 0.042680524289608, 0.035096488893032074, -0.007423779461532831, -0.010890171863138676, -0.13970927894115448, 0.04889395087957382, -0.09541162848472595, 0.015135419555008411, -0.06294786930084229, 0.05718193203210831, -0.013456620275974274, 0.06121910735964775, -0.027427172288298607, -0.00119144341442734, -0.0032378342002630234, 0.1079753115773201, 0.06617750227451324, -0.037562549114227295, -0.04012647271156311, -0.0160794910043478, 0.0019341005245223641, -0.06654153019189835, -0.037905991077423096, 0.04460194706916809, 0.027814285829663277, -0.03698758780956268, -0.028415411710739136, -0.016379544511437416, 0.048491235822439194, -0.09179292619228363, 0.019262786954641342, 0.06239575892686844, 0.09834474325180054, -0.009607790037989616, 0.06148539483547211, 0.07401685416698456, -0.07086174935102463, -0.003559660632163286, 0.011321664787828922, 0.027260921895503998, 0.006163783371448517, -0.03867856413125992, -0.12485022097826004, 0.00824109185487032, -0.04007820039987564, -0.04822193458676338, 0.04021501541137695, 0.028979985043406487, -0.007275183219462633, 0.024307936429977417, -0.14488589763641357, 0.01028357818722725, 0.01413118839263916, 0.014577963389456272, -0.010536912828683853, 0.062196046113967896, 0.04001040756702423, -0.025975074619054794, 0.006412067916244268, 0.11049626022577286, 0.00044098927173763514, 0.10570273548364639, 0.01237177848815918, -0.1590832620859146, 0.021830718964338303, -0.09351056069135666, -0.08022728562355042, -0.007985919713973999, 0.02436312846839428, -0.03688625991344452, -0.038519442081451416, -3.305913054418852e-08, -0.14624664187431335, 0.02532908134162426, 0.004475994035601616, -0.05319337546825409, -0.0038912806194275618, 0.0451187826693058, -0.042578261345624924, 0.03183386102318764, -0.06630449742078781, 0.02753695659339428, -0.02674207091331482, -0.0746585950255394, 0.02223210409283638, -0.01069977879524231, 0.0634097307920456, 0.016501106321811676, 0.03205839917063713, -0.01056729070842266, 0.018237687647342682, 0.004738109186291695, 0.09033214300870895, -0.03863212466239929, 0.043851952999830246, 0.06113384664058685, 0.01077730767428875, 0.023018663749098778, 5.130676436237991e-05, -0.06265684217214584, -0.019049089401960373, 0.03673588111996651, -0.08099474757909775, 0.08255834132432938, 0.06557593494653702, -0.05851420387625694, 0.1977175921201706, -0.027509989216923714, 0.031591080129146576, -0.058108605444431305, -0.021896004676818848, 0.031798843294382095, -0.017826348543167114, -0.014009958133101463, 0.01003499049693346, -0.003822299186140299, 0.07498115301132202, 0.07437510043382645, 0.10125486552715302, 0.004913542419672012, -0.06098117306828499, 0.10364554822444916, -0.05071886256337166, -0.0009748710435815156, 0.03265133872628212, 0.015405169688165188, -0.017788780853152275, -0.007601050194352865, 0.05719943344593048, -0.04009360447525978, 0.007239056285470724, 0.024487406015396118, -0.004046750720590353, 0.022802678868174553, -0.04107506945729256, 0.0029200450517237186]
    
    db = SupabaseAPI()
    print(db.rag_Search_raw(embs, match_count=30))

    